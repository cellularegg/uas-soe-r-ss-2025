---
title: "Pierce County Property Analysis: Data Loading"
subtitle: "EDA"
author: "B1_Pierce-House-Price"
date: "today"
format: 
  html:
    toc: true
    toc-depth: 3
    theme: cosmo 
    code-fold: true
    code-summary: "Show/Hide Code"
    df-print: kable # For nice table printing with knitr::kable
editor: source
execute:
  echo: true
  warning: false   # Suppress warnings globally for now
  message: false   # Suppress messages globally for now
  error: true      # Display errors if they occur
---

# Data Import

```{r}
library(dplyr)
library(readr)

full_data <- read_csv("../data/final_data.csv", show_col_types = FALSE)
```


```{r}
library(dplyr)

full_data <- full_data %>%
  dplyr::select(
    Sale_Date_Raw,
    Sale_Price_Raw,
    Square_Feet_Raw,
    Latitude_Raw,
    Longitude_Raw,
    Bedrooms_Raw,
    Bathrooms_Raw,
    Stories_Raw,
    Quality,
    Condition,
    Neighborhood,
    Street_Type,
    Utility_Water,
    Utility_Electric,
    Utility_Sewer,
    Improved_Vacant_Raw,
    Year_Built_Raw
  ) %>%
  mutate(
    Sale_Date_Raw       = as.Date(Sale_Date_Raw),
    Sale_Price_Raw      = as.numeric(Sale_Price_Raw),
    Square_Feet_Raw     = as.numeric(Square_Feet_Raw),
    Latitude_Raw        = as.numeric(Latitude_Raw),
    Longitude_Raw       = as.numeric(Longitude_Raw),
    Bedrooms_Raw        = as.numeric(Bedrooms_Raw),
    Bathrooms_Raw       = as.numeric(Bathrooms_Raw),
    Stories_Raw         = as.numeric(Stories_Raw),
    Quality             = as.factor(Quality),
    Condition           = as.factor(Condition),
    Neighborhood        = as.factor(Neighborhood),
    Street_Type         = as.factor(Street_Type),
    Utility_Water       = as.factor(Utility_Water),
    Utility_Electric    = as.factor(Utility_Electric),
    Utility_Sewer       = as.factor(Utility_Sewer),
    Improved_Vacant_Raw = as.factor(Improved_Vacant_Raw),
    Year_Built_Raw      = as.numeric(Year_Built_Raw)
  )
```

# EDA

```{r}
str(full_data)
```
```{r}
# Count missing values per column
missing_summary <- sapply(full_data, function(x) sum(is.na(x)))
missing_summary <- sort(missing_summary, decreasing = TRUE)
print(missing_summary)

# Optionally show % missing
missing_pct <- round(missing_summary / nrow(full_data) * 100, 2)
data.frame(Column = names(missing_pct), Missing = missing_summary, Percent = missing_pct)
```
```{r}
full_data <- full_data %>%
  filter(!is.na(Square_Feet_Raw), !is.na(Sale_Price_Raw))

```

```{r}
full_data
```


```{r}
# Count missing values per column
missing_summary <- sapply(full_data, function(x) sum(is.na(x)))
missing_summary <- sort(missing_summary, decreasing = TRUE)
print(missing_summary)

# Optionally show % missing
missing_pct <- round(missing_summary / nrow(full_data) * 100, 2)
data.frame(Column = names(missing_pct), Missing = missing_summary, Percent = missing_pct)
```
View Quality has too many missing values. We will, therefore, exclude it from further analysis and modelling.
The other predictors will be imputed for modelling.


### Importing Libraries for EDA
```{r}
library(tigris)
library(sf)
library(dplyr)
library(ggplot2)
library(viridis)
library(scales)
library(grid)
library(GGally)
library(tidyr)
```

## Size & Structure

### Square Feet

```{r}
ggplot(full_data, aes(x = Square_Feet_Raw)) +
  geom_histogram(binwidth = 100, fill = "#1F77B4", color = "black", alpha = 0.7) +
  scale_x_continuous(labels = scales::comma) +
  labs(
    title = "Distribution of Square Footage",
    x = "Square Feet",
    y = "Count"
  ) +
  theme_minimal()
```
### Zooming in due to extreme outliers

```{r}
ggplot(full_data, aes(x = Square_Feet_Raw)) +
  geom_histogram(binwidth = 100, fill = "steelblue", color = "black") +
  coord_cartesian(xlim = c(0, 10000)) +  # just zoom the plot
  labs(
    title = "Distribution of Square Footage (Zoomed In)",
    x = "Square Feet",
    y = "Count"
  ) +
  theme_minimal()
```

#### Square Footage vs. Sale Price
```{r}
ggplot(full_data, aes(x = Square_Feet_Raw, y = Sale_Price_Raw)) +
  geom_point(alpha = 0.3, color = "#1f77b4") +
  geom_smooth(method = "lm", se = TRUE, color = "darkred") +
  scale_y_continuous(labels = scales::dollar) +
  scale_x_continuous(labels = scales::comma) +
  labs(
    title = "Sale Price vs. Square Footage",
    x = "Square Feet",
    y = "Sale Price"
  ) +
  theme_minimal()
```


### Bedrooms

```{r}
ggplot(full_data, aes(x = factor(Bedrooms_Raw), fill = factor(Bedrooms_Raw))) +
  geom_bar(color = "black", alpha = 0.8) +
  scale_fill_brewer(palette = "Pastel1") +
  labs(
    title = "Number of Bedrooms",
    x = "Bedrooms",
    y = "Count",
    fill = "Bedrooms"
  ) +
  theme_minimal()
```

#### Sale Price vs. Bedrooms 
```{r}
ggplot(full_data, aes(x = factor(Bedrooms_Raw), y = Sale_Price_Raw)) +
  geom_boxplot(fill = "#2ca02c", alpha = 0.6) +
  scale_y_log10(labels = scales::dollar) +
  labs(title = "Sale Price by Number of Bedrooms", x = "Bedrooms", y = "Sale Price") +
  theme_minimal()
```


#### Zooming in for more information

```{r}
ggplot(full_data, aes(x = factor(Bedrooms_Raw), y = Sale_Price_Raw)) +
  geom_boxplot(fill = "#2ca02c", alpha = 0.6) +
  scale_y_log10(
  labels = scales::dollar,
  limits = c(50000, 1000000)
) +
  labs(title = "Sale Price by Number of Bedrooms", x = "Bedrooms", y = "Sale Price") +
  theme_minimal()
```

### Bathrooms

```{r}
ggplot(full_data, aes(x = Bathrooms_Raw)) +
  geom_histogram(binwidth = 0.25, fill = "#E377C2", color = "black", alpha = 0.7) +
  scale_x_continuous(breaks = seq(0, max(full_data$Bathrooms_Raw, na.rm = TRUE), by = 0.5)) +
  labs(
    title = "Number of Bathrooms",
    x = "Bathrooms",
    y = "Count"
  ) +
  theme_minimal()+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

#### Sale Price vs. Bathrooms

```{r}
ggplot(full_data, aes(x = factor(Bathrooms_Raw), y = Sale_Price_Raw)) +
  geom_boxplot(fill = "#9467bd", alpha = 0.6) +
  scale_y_log10(labels = scales::dollar) +
  labs(
    title = "Sale Price by Number of Bathrooms",
    x = "Bathrooms",
    y = "Sale Price"
  ) +
  theme_minimal()+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

### Stories

```{r}
ggplot(full_data, aes(x = factor(Stories_Raw), fill = factor(Stories_Raw))) +
  geom_bar(color = "black", alpha = 0.8) +
  scale_fill_brewer(palette = "Set2") +
  labs(
    title = "Number of Stories",
    x = "Stories",
    y = "Count",
    fill = "Stories"
  ) +
  theme_minimal()
```


#### Sale Price vs. Stories

```{r}
ggplot(full_data, aes(x = factor(Stories_Raw), y = Sale_Price_Raw, fill = factor(Stories_Raw))) +
  geom_boxplot(alpha = 0.7) +
  scale_y_log10(labels = scales::dollar) +
  scale_fill_brewer(palette = "Pastel2") +
  labs(
    title = "Sale Price by Number of Stories",
    x = "Stories",
    y = "Sale Price",
    fill = "Stories"
  ) +
  theme_minimal()
```


### Correlation Matrix

```{r}
# Load required libraries
library(dplyr)
library(corrplot)

# Select numeric variables and remove rows with NAs
numeric_vars <- full_data %>%
  dplyr::select(Sale_Price_Raw, Square_Feet_Raw, Bedrooms_Raw, Bathrooms_Raw, Stories_Raw) %>%
  na.omit()

# Compute the correlation matrix
cor_matrix <- cor(numeric_vars, use = "complete.obs")

# Visualize the correlation matrix
corrplot(cor_matrix, method = "circle", 
         type = "upper",       # Show upper triangle only
         order = "hclust",     # Cluster similar variables
         addCoef.col = "black",# Add correlation coefficients
         tl.col = "black",     # Text label color
         tl.srt = 45,          # Text label rotation
         number.cex = 0.8,     # Correlation number size
         diag = FALSE)         # Do not show diagonal
```

### Boxplots for Outlier Detection

```{r}
boxplot_stats <- full_data %>%
  dplyr::select(Square_Feet_Raw, Bedrooms_Raw, Bathrooms_Raw, Stories_Raw) %>%
  pivot_longer(cols = everything(), names_to = "Variable", values_to = "Value") %>%
  ggplot(aes(x = Variable, y = Value)) +
  geom_boxplot(fill = "#d62728", alpha = 0.6) +
  coord_flip() +
  labs(title = "Boxplots for Outlier Detection", y = "Value", x = "")
boxplot_stats
```


## Location 

### Mapping Median Price per Sqft Across Pierce County

```{r warning=FALSE} 
# 1. Load Pierce County boundary (Washington = '53')
pierce_county <- counties(state = "53", cb = TRUE) %>%
  filter(NAME == "Pierce")

# 2. Convert full_data to sf object with WGS84 CRS
full_data_sf <- full_data %>%
  mutate(
    Longitude_Raw = as.numeric(Longitude_Raw),
    Latitude_Raw = as.numeric(Latitude_Raw)
  ) %>%
  filter(!is.na(Longitude_Raw) & !is.na(Latitude_Raw)) %>%
  st_as_sf(coords = c("Longitude_Raw", "Latitude_Raw"), crs = 4326, remove = FALSE)

# 3. Transform Pierce County CRS to match full_data
pierce_county <- st_transform(pierce_county, st_crs(full_data_sf))

# 4. Keep only points within Pierce County
full_data_sf <- full_data_sf[st_within(full_data_sf, pierce_county, sparse = FALSE), ]

# 5. Get bounding box
lat_range <- st_bbox(pierce_county)[c("ymin", "ymax")]
lon_range <- st_bbox(pierce_county)[c("xmin", "xmax")]

# 6. Define bin edges
num_bins <- 80
lat_bins <- seq(lat_range[1], lat_range[2], length.out = num_bins + 1)
lon_bins <- seq(lon_range[1], lon_range[2], length.out = num_bins + 1)

# 7. Bin data and compute average price per sqft
full_data_sf <- full_data_sf %>%
  mutate(
    Price_per_sqft = Sale_Price_Raw / Square_Feet_Raw,
    Lat_bin = cut(Latitude_Raw, breaks = lat_bins, include.lowest = TRUE),
    Lon_bin = cut(Longitude_Raw, breaks = lon_bins, include.lowest = TRUE)
  ) %>%
  filter(Square_Feet_Raw >= 100)   # example threshold: ignore values > 1000

# 8. Aggregate by bin and extract bin boundaries
heatmap_data <- full_data_sf %>%
  filter(Square_Feet_Raw >= 100) %>%   # example threshold: ignore values > 1000
  group_by(Lat_bin, Lon_bin) %>%
  summarize(
    Avg_Price_sqft = median(Price_per_sqft, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  mutate(
    ymin = as.numeric(sub("\\((.+),.*", "\\1", Lat_bin)),
    ymax = as.numeric(sub(".*,([^]]*)\\]", "\\1", Lat_bin)),
    xmin = as.numeric(sub("\\((.+),.*", "\\1", Lon_bin)),
    xmax = as.numeric(sub(".*,([^]]*)\\]", "\\1", Lon_bin))
  )

# 9. Plot the heatmap using geom_rect
# Calculate log breaks evenly spaced along the log scale
log_min <- min(log(heatmap_data$Avg_Price_sqft), na.rm = TRUE)
log_max <- max(log(heatmap_data$Avg_Price_sqft), na.rm = TRUE)

# Generate 5 evenly spaced breaks on log scale
log_breaks <- seq(log_min, log_max, length.out = 5)
# Convert breaks back to original scale for labeling
legend_labels <- scales::dollar(exp(log_breaks))

ggplot() +
  geom_sf(data = pierce_county, fill = "white", color = "black", size = 0.6) +
  geom_rect(
    data = heatmap_data,
    aes(
      xmin = xmin, xmax = xmax,
      ymin = ymin, ymax = ymax,
      fill = log(Avg_Price_sqft)  # fill is log-transformed
    ),
    alpha = 0.85,
    color = NA
  ) +
  scale_fill_viridis_c(
    option = "magma",
    trans = "identity",           # no further transformation, since fill is already log
    breaks = log_breaks,          # breaks evenly spaced in log scale
    labels = legend_labels,       # labels in original scale
    na.value = "grey90",
    name = "Price per sqft"
  ) +
  coord_sf(xlim = lon_range, ylim = lat_range, expand = FALSE) +
  labs(
    title = "Median Prices of Houses",
    subtitle = "in Pierce County",
    x = "Longitude",
    y = "Latitude"
  ) +
  theme_minimal(base_size = 13) +
  theme(
    plot.title = element_text(face = "bold", size = 18, hjust = 0.5, margin = margin(b = 4)),
    plot.subtitle = element_text(size = 14, hjust = 0.5, margin = margin(b = 12)),
    axis.title = element_text(face = "italic", size = 12),
    axis.text.x = element_text(angle = 45, hjust = 1, size = 9),
    axis.text.y = element_text(size = 9),
    legend.title = element_text(face = "bold", size = 12),
    legend.text = element_text(size = 10),
    legend.key.height = unit(1, "cm"),  # increase legend height here
    panel.grid.major = element_line(color = "gray80", size = 0.3),
    panel.grid.minor = element_blank()
  )
```

### Neighborhood

```{r}
# Calculate median price per sqft by neighborhood
median_prices <- full_data_sf %>%
  group_by(Neighborhood) %>%
  summarize(median_price = median(Price_per_sqft, na.rm = TRUE)) %>%
  arrange(desc(median_price))

# Select top and bottom 10 neighborhoods
top_bottom_neigh <- bind_rows(
  head(median_prices, 10),
  tail(median_prices, 10)
)

# Filter main data to just those neighborhoods and set factor levels
filtered_data <- full_data_sf %>%
  filter(Neighborhood %in% top_bottom_neigh$Neighborhood) %>%
  mutate(Neighborhood = factor(Neighborhood, levels = top_bottom_neigh$Neighborhood))

# --- Option 1: Boxplot for Top & Bottom 10 Neighborhoods ---
ggplot(filtered_data, aes(x = Neighborhood, y = Price_per_sqft)) +
  geom_boxplot(outlier.shape = NA, fill = "#2980B9", color = "#1C2833", alpha = 0.6) +
  coord_flip(ylim = c(0, 2000)) +
  labs(
    title = "Top & Bottom 10 Neighborhoods by Median Price per Sqft",
    x = "Neighborhood",
    y = "Price per sqft"
  ) +
  theme_minimal(base_size = 12)

# --- Option 2: Summary Table ---
summary_table <- full_data_sf %>%
  group_by(Neighborhood) %>%
  summarize(
    n = n(),
    median_pps = median(Price_per_sqft, na.rm = TRUE),
    IQR_pps = IQR(Price_per_sqft, na.rm = TRUE)
  ) %>%
  arrange(desc(median_pps))

print(head(summary_table, 10))  # Top 10 neighborhoods by median
# View(summary_table)  # Optional: Open in RStudio viewer

# --- Option 3: Histogram of Neighborhood Medians ---
ggplot(median_prices, aes(x = median_price)) +
  geom_histogram(binwidth = 25, fill = "#1ABC9C", color = "white") +
  labs(
    title = "Distribution of Median Price per Sqft Across Neighborhoods",
    x = "Median Price per sqft",
    y = "Number of Neighborhoods"
  ) +
  theme_minimal(base_size = 13)

```
## Utilities

### Utility Water

```{r}
# Create boxplots per category of water utility
ggplot(full_data_sf, aes(x = Price_per_sqft, y = Utility_Water)) +
  geom_boxplot() +
  scale_x_log10(labels = scales::dollar) +
  labs(
    title = "House Price per Square Foot by Water Utility",
    x = "Price per sqft",
    y = "Water Utility"
  ) +
  theme_minimal(base_size = 21)
```



### Utility Electric
```{r}
# Create boxplots per category of electric utility
ggplot(full_data_sf, aes(x = Price_per_sqft, y = Utility_Electric)) +
  geom_boxplot() +
  scale_x_log10(labels = scales::dollar) +
  labs(
    title = "House Price per Square Foot by Electric Utility",
    x = "Price per sqft",
    y = "Electric Utility"
  ) +
  theme_minimal(base_size = 21) 
```


### Utility Sewer
```{r}
# Create boxplots per category of sewer utility
ggplot(full_data_sf, aes(x = Price_per_sqft, y = Utility_Sewer)) +
  geom_boxplot() +
  scale_x_log10(labels = scales::dollar) +
  labs(
    title = "House Price per Square Foot by Sewer Utility",
    x = "Price per sqft",
    y = "Sewer Utility"
  ) +
  theme_minimal(base_size = 21)
```


### Street type

```{r}
# Create boxplots per category of street type
ggplot(full_data_sf, aes(x = Price_per_sqft, y = Street_Type)) +
  geom_boxplot() +
  scale_x_log10(labels = scales::dollar) +
  labs(
    title = "House Price per Square Foot by Street Type",
    x = "Price per sqft",
    y = "Street Type"
  ) +
  theme_minimal(base_size = 21)

```

## Target Variable

### Sales Price
```{r}
#Create a histogram of the sales price
ggplot(full_data_sf, aes(x = Sale_Price_Raw)) +
  geom_boxplot() +
  scale_x_log10(labels = scales::dollar) +
  labs(
    title = "Distribution of Sales Price",
    x = "Sales Price",
  ) +
  theme_minimal(base_size = 21) + 
  theme(axis.text.y=element_blank(),
        axis.ticks.y=element_blank())

```

```{r}
summary(full_data_sf$Sale_Price_Raw)
```


### Sales Price per Square Foot
```{r}
ggplot(full_data_sf, aes(x = Price_per_sqft)) +
  geom_boxplot() +
  labs(title = "Distribution of Price per Square Foot",
       x = "Price per SqFt") +
  theme_minimal(base_size = 15)

```

```{r}
summary(full_data_sf$Price_per_sqft)
```

## Quality & Condition

### Year Built

```{r}
# Age distributions
full_data %>%
  ggplot(aes(x = Year_Built_Raw)) +
  geom_histogram(binwidth = 5, fill = "#F39C12", color = "black") +
  labs(title = "Distribution of Year Built", x = "Year Built", y = "Count") +
  theme_minimal()


```

### Price vs. Age

```{r}
# Price vs Age
full_data %>%
  mutate(Building_Age = Sale_Date_Raw - as.Date(paste0(Year_Built_Raw, "-01-01"))) %>%
  ggplot(aes(x = as.numeric(Building_Age)/365.25, y = Sale_Price_Raw)) +
  geom_point(alpha = 0.3) +
  geom_smooth(method = "loess", se = FALSE, color = "red") +
  scale_y_log10(labels = scales::dollar, limits = c(50000, 1000000)) +
  labs(
    title = "Sale Price vs. Building Age (based on Year Built)",
    x = "Building Age (Years)",
    y = "Sale Price"
  ) +
  theme_minimal()
```

### Quality

```{r}
full_data$Quality <- factor(full_data$Quality, levels = c(
  "Low", "Low Plus", "Fair", "Fair Plus",
  "Average", "Average Plus", "Good", "Good Plus",
  "Very Good", "Very Good Plus", "Excellent"
))
ggplot(full_data, aes(x = Quality, y = Sale_Price_Raw)) +
  geom_boxplot(fill = "#3498DB", alpha = 0.6) +
  scale_y_log10(labels = scales::dollar) +
  labs(title = "Sale Price by Quality", x = "Quality", y = "Sale Price") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

### Condition
```{r}
full_data$Condition <- factor(full_data$Condition, levels = c(
  "Uninhabitable", "Very Poor", "Extra Poor", "Poor", 
  "Fair", "Average", "Good", "NA"
))
ggplot(full_data, aes(x = Condition, y = Sale_Price_Raw)) +
  geom_boxplot(fill = "#27AE60", alpha = 0.6) +
  scale_y_log10(labels = scales::dollar) +
  labs(title = "Sale Price by Condition", x = "Condition", y = "Sale Price") +
  theme_minimal()
```


## Multivariate Visualization

1. Do large homes with high quality ratings sell at disproportionately higher prices?

```{r}
ggplot(full_data, aes(x = Square_Feet_Raw, y = Sale_Price_Raw)) +
  geom_point(alpha = 0.3, size = 0.5) +
  geom_smooth(method = "lm", color = "red", se = FALSE) +
  scale_y_log10(labels = scales::dollar) +
  facet_wrap(~ Quality, scales = "free") +
  labs(title = "Sale Price vs. Square Feet by Quality",
       x = "Square Feet", y = "Sale Price") +
  theme_minimal()+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```



2. Do pricing patterns by size differ across neighborhoods?

```{r}
top_neigh <- full_data %>%
  count(Neighborhood) %>%
  top_n(5) %>%
  pull(Neighborhood)

filtered_data <- full_data %>%
  filter(Neighborhood %in% top_neigh) 

filtered_data %>%
  filter(!is.na(Quality), !is.na(Neighborhood)) %>%
  ggplot(aes(x = Quality, y = Sale_Price_Raw)) +
  geom_boxplot(outlier.shape = NA, fill = "#3498DB", alpha = 0.6) +
  scale_y_log10(labels = scales::dollar) +
  labs(
    title = "Sale Price by Quality across Top 5 Neighborhoods",
    x = "Quality",
    y = "Sale Price"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    strip.text = element_text(size = 9)
  ) +
  facet_wrap(~Neighborhood, scales = "free_y")

```


3. How does the combination of condition and quality affect price?

```{r}
full_data %>%
  group_by(Condition, Quality) %>%
  summarise(
    median_pps = median(Sale_Price_Raw / Square_Feet_Raw, na.rm = TRUE),
    n = n()
  ) %>%
  arrange(desc(median_pps)) %>%
  knitr::kable()
```



4. Are price patterns different in northern vs. southern areas (by Latitude)?


```{r}
# Filter and classify region
full_data_new <- full_data %>%
  filter(!is.na(Square_Feet_Raw), !is.na(Sale_Price_Raw), !is.na(Latitude_Raw)) %>%
  mutate(Region = ifelse(Latitude_Raw > 47.1, "North", "South"))

# Generate plot
ggplot(full_data_new, aes(x = Square_Feet_Raw, y = Sale_Price_Raw)) +
  geom_point(alpha = 0.3, size = 0.5) +
  geom_smooth(method = "loess", color = "red", se = FALSE) +
  facet_wrap(~ Region, scales = "free") +
  scale_y_log10(labels = scales::dollar) +
  labs(
    title = "Price vs. Size in North vs. South Pierce County",
    x = "Square Feet",
    y = "Sale Price"
  ) +
  theme_minimal()
```

5. Who’s in the top 1% of price per sqft? What are they like?


```{r}
threshold <- quantile(full_data$Sale_Price_Raw / full_data$Square_Feet_Raw, 0.99, na.rm = TRUE)

full_data %>%
  mutate(PPS = Sale_Price_Raw / Square_Feet_Raw) %>%
  filter(PPS >= threshold) %>%
  count(Quality, Condition, sort = TRUE) %>%
  knitr::kable()
```

